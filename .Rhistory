refpars <- list("gLC" = c(0.030, 0.028),  # Maximum growth rate under light limitation #DONE
"kLC" = c(20, 20),  #      # Light availability under which 1/2 gLC is reached
"gNC" = c(0.028, 0.030), # Maximum growth rate under nutrient limitation #DONE
"kNC" = c(20, 20), #   # N availability under which 1/2 gNC is reached
"mC" = c(0.001, 0.001), #   # per capita mortality rate
"a" = 0.05, #   # turnover rate of nutrient supply. Can later be determined
# because it determiens the biomass in equilibrium (see Eppinga 2011 Appendix)
"S" = S, #DONE
"qNC" = c(18, 18), #  DONE # N content of tissue
"rho" = 1200, # DONE # soil bulk density
"l_Root" = 1, #DONE # rooting depyth
"QNC" = c(18, 18), #  DONE
"alphaNC" = c(0.7, 0.7), #DONE # Nutrient litter feedback
"dC" = c(0.015, 0.015), #DONE # Litter decomposition rate
"cRate" = 10, #DONE
"L0" = L0, #
"gamma_LC" = c(0.001, 0.001), #  # light interception coefficient
"alpha_LC" = c(0.001, 0.001), #  # light litter feedback coefficient
"alpha_a" = -0.02, # ?
"alpha_b" = 0, # ?
"beta_a" = 0, # partially DONE
"beta_b" = -0.02, #DONE
"sccr" = c(1,1) #DONE
)
yseq <- Lseq
xseq <- Sseq
resmat <- matrix(NA, length(xseq), length(yseq))
for(i in 1: length(xseq)){
for(k in 1:length(yseq)){
S <- xseq[i]
L0 <- yseq[k]
yini <- list("BA" = 100, "BB" = 100,"S" =  S,"DA" =  10, "DB" = 10,"L0"=  L0,
"Sa"= 0.5,"Dca"= 1,"Dcb" = 1)
pars <- modifyList(refpars, list("S" = S, "L0" = L0))
pars <- createPar(yini, pars)
out <- psfmod(pars, 20000)
try(resmat[i,k] <- out[20000,2]/(out[20000,2]+out[20000,3]))
}
print(i)
}
levelplot(t(resmat), xlab = list("L0", cex = 1.3) ,ylab = list("S", cex = 1.3), at = seq(0,1,len = 1000),
colorkey = list(col = colvec, at = seq(0,1,len = 1001),
labels = list(at = c(0.2,0.8), labels = c("B dominant", "A dominant"), cex = 1.3)), scales = list(draw = FALSE, cex = 1.3), col.regions = colvec)
require(lattice)
levelplot(t(resmat), xlab = list("L0", cex = 1.3) ,ylab = list("S", cex = 1.3), at = seq(0,1,len = 1000),
colorkey = list(col = colvec, at = seq(0,1,len = 1001),
labels = list(at = c(0.2,0.8), labels = c("B dominant", "A dominant"), cex = 1.3)), scales = list(draw = FALSE, cex = 1.3), col.regions = colvec)
colfunc <- colorRampPalette(c("blue", "white", "red"))
colvec <- colfunc(1000)
denscolfun <- colorRampPalette(c("red", "yellow", "white"))
denscol <- denscolfun(1000)
levelplot(t(resmat), xlab = list("L0", cex = 1.3) ,ylab = list("S", cex = 1.3), at = seq(0,1,len = 1000),
colorkey = list(col = colvec, at = seq(0,1,len = 1001),
labels = list(at = c(0.2,0.8), labels = c("B dominant", "A dominant"), cex = 1.3)), scales = list(draw = FALSE, cex = 1.3), col.regions = colvec)
# Parameters
refpars <- list("gLC" = c(0.030, 0.028),  # Maximum growth rate under light limitation #DONE
"kLC" = c(20, 20),  #      # Light availability under which 1/2 gLC is reached
"gNC" = c(0.028, 0.030), # Maximum growth rate under nutrient limitation #DONE
"kNC" = c(20, 20), #   # N availability under which 1/2 gNC is reached
"mC" = c(0.001, 0.001), #   # per capita mortality rate
"a" = 0.05, #   # turnover rate of nutrient supply. Can later be determined
# because it determiens the biomass in equilibrium (see Eppinga 2011 Appendix)
"S" = S, #DONE
"qNC" = c(18, 18), #  DONE # N content of tissue
"rho" = 1200, # DONE # soil bulk density
"l_Root" = 1, #DONE # rooting depyth
"QNC" = c(18, 18), #  DONE
"alphaNC" = c(0.7, 0.7), #DONE # Nutrient litter feedback
"dC" = c(0.015, 0.015), #DONE # Litter decomposition rate
"cRate" = 10, #DONE
"L0" = L0, #
"gamma_LC" = c(0.001, 0.001), #  # light interception coefficient
"alpha_LC" = c(0.001, 0.001), #  # light litter feedback coefficient
"alpha_a" = -0.01, # ?
"alpha_b" = 0, # ?
"beta_a" = 0, # partially DONE
"beta_b" = 0, #DONE
"sccr" = c(1,1) #DONE
)
yseq <- Lseq
xseq <- Sseq
resmat <- matrix(NA, length(xseq), length(yseq))
for(i in 1: length(xseq)){
for(k in 1:length(yseq)){
S <- xseq[i]
L0 <- yseq[k]
yini <- list("BA" = 100, "BB" = 100,"S" =  S,"DA" =  10, "DB" = 10,"L0"=  L0,
"Sa"= 0.5,"Dca"= 1,"Dcb" = 1)
pars <- modifyList(refpars, list("S" = S, "L0" = L0))
pars <- createPar(yini, pars)
out <- psfmod(pars, 20000)
try(resmat[i,k] <- out[20000,2]/(out[20000,2]+out[20000,3]))
}
}
levelplot(t(resmat), xlab = list("L0", cex = 1.3) ,ylab = list("S", cex = 1.3), at = seq(0,1,len = 1000),
colorkey = list(col = colvec, at = seq(0,1,len = 1001),
labels = list(at = c(0.2,0.8), labels = c("B dominant", "A dominant"), cex = 1.3)), scales = list(draw = FALSE, cex = 1.3), col.regions = colvec)
yseq <- Lseq
xseq <- Sseq
resmat <- matrix(NA, length(xseq), length(yseq))
for(i in 1: length(xseq)){
for(k in 1:length(yseq)){
S <- xseq[i]
L0 <- yseq[k]
yini <- list("BA" = 100, "BB" = 100,"S" =  S,"DA" =  10, "DB" = 10,"L0"=  L0,
"Sa"= 0.5,"Dca"= 1,"Dcb" = 1)
pars <- modifyList(refpars, list("S" = S, "L0" = L0))
pars <- createPar(yini, pars)
out <- psfmod(pars, 20000)
plot(out)
try(resmat[i,k] <- out[20000,2]/(out[20000,2]+out[20000,3]))
}
}
plot(out[,8], type ="l")
library(psfmod)
feedbackModel <- function (t, y, mu) {
# Extract parameter objects from parameter vector
gLinit <- mu[1:2]
kL <- mu[3:4]
gNinit <- mu[5:6]
kN <- mu[7:8]
m <- mu[9:10]
a <- mu[11]
S <- mu[12]
qN <- mu[13:14]
rho <- mu[15]
l_Root <- mu[16]
QN <- mu[17:18]
alphaN <- mu[19:20]
d <- mu[21:22]
cRate <- mu[23]
L0 <- mu[24]
gamma_L <- mu[25:26]
alpha_L <- mu[27:28]
alpha <- mu[29:30] # see Bever 2003
beta <- mu[31:32] # see Bever 2003
sccr <- mu[33:34] # soil community change rate for decomposers and competitors
qmax <- QN # plant tissue N content which has maximum decomposition rate
gL <- gN <- numeric(2)
hfa <- mu[35]
# Extract state variables from state variable vector
B <- y[1:2] # Biomass: Carex and Phalaris
N <- y[3] # Nutrients
D <- y[4:5] # Litter mass:  Carex and Phalaris
L <- y[6] # Light
S_a <- y[7] #S_a in Bever 2003
dc <- y[8:9]
gL[1] <- max(0,(gLinit[1] + alpha[1]*S_a + beta[1]*(1-S_a)))
gL[2] <- max(0,(gLinit[2] + alpha[2]*S_a + beta[2]*(1-S_a)))
gN[1] <- max(0,(gNinit[1] + alpha[1]*S_a + beta[1]*(1-S_a)))
gN[2] <- max(0,(gNinit[2] + alpha[2]*S_a + beta[2]*(1-S_a)))
if(hfa == 0) dc_dot <- - (dc- ((qN[1]/qmax)*(D[1]/(sum(D))) + (qN[2]/qmax)*(D[2]/(sum(D)))))*sccr[1]
else dc_dot <- c(- (S_a- (B[1]/sum(B)))*sccr[3], - ((1-S_a)- (B[2]/sum(B)))*sccr[3])
Growth <- pmin(gL * L /(kL + L), gN * N / (kN + N)) * B
B_dot <-  Growth - m * B
N_dot <- a * (S - N) - sum(qN / (rho * l_Root) * Growth) +
sum(qN[1]^2 / (QN[1] * rho * l_Root) * alphaN[1] * d[1] * D[1] * dc[1], qN[2]^2 / (QN[2] * rho * l_Root) * alphaN[2] * d[2] * D[2] * dc[2])
D_dot <- c(m * B[1] - qN[1]/QN[1] * d[1] * D[1] * dc[1],
m * B[2] - qN[2]/QN[2] * d[2] * D[2] * dc[2])
L_dot <- cRate * (L0 - sum(gamma_L * B * L) - sum(alpha_L * D * L) - L)
# S_dot <- S_a*(1-S_a)*(B[1]/(B[1]+B[2]) - v*(B[2]/(B[1]+B[2])))*sccr  # From Bever
# S_dot <- S_a*(1-S_a)* ((B[1] - v*B[2])/sum(B)  )   # From Revilla
S_dot <- - (S_a- (B[1]/sum(B)))*sccr[2] # simple version by me
list(c(B_dot, N_dot, D_dot, L_dot, S_dot, dc_dot))
}
yini <- list("BA" = 100, "BB" = 100,"S" =  S,"DA" =  10, "DB" = 10,"L0"=  L0,
"Sa"= 0.5,"Dca"= 1,"Dcb" = 1)
feedbackModel2 <- function (t, y, mu) {
# Extract parameter objects from parameter vector
gLinit <- mu[1:2]
kL <- mu[3:4]
gNinit <- mu[5:6]
kN <- mu[7:8]
m <- mu[9:10]
a <- mu[11]
S <- mu[12]
qN <- mu[13:14]
rho <- mu[15]
l_Root <- mu[16]
QN <- mu[17:18]
alphaN <- mu[19:20]
d <- mu[21:22]
cRate <- mu[23]
L0 <- mu[24]
gamma_L <- mu[25:26]
alpha_L <- mu[27:28]
alpha <- mu[29:30] # see Bever 2003
beta <- mu[31:32] # see Bever 2003
sccr <- mu[33:34] # soil community change rate for decomposers and competitors
qmax <- QN # plant tissue N content which has maximum decomposition rate
gL <- gN <- numeric(2)
hfa <- mu[35]
# Extract state variables from state variable vector
B <- y[1:2] # Biomass: Carex and Phalaris
N <- y[3] # Nutrients
D <- y[4:5] # Litter mass:  Carex and Phalaris
L <- y[6] # Light
S_a <- y[7] #S_a in Bever 2003
dc <- y[8:9]
gL[1] <- max(0,(gLinit[1] + alpha[1]*S_a + beta[1]*(1-S_a)))
gL[2] <- max(0,(gLinit[2] + alpha[2]*S_a + beta[2]*(1-S_a)))
gN[1] <- max(0,(gNinit[1] + alpha[1]*S_a + beta[1]*(1-S_a)))
gN[2] <- max(0,(gNinit[2] + alpha[2]*S_a + beta[2]*(1-S_a)))
if(hfa == 0) dc_dot <- - (dc- ((qN[1]/qmax)*(D[1]/(sum(D))) + (qN[2]/qmax)*(D[2]/(sum(D)))))*sccr[1]
else dc_dot <- c(- (S_a- (B[1]/sum(B)))*sccr[3], - ((1-S_a)- (B[2]/sum(B)))*sccr[3])
Growth <- pmin(gL * L /(kL + L), gN * N / (kN + N)) * B
B_dot <-  Growth - m * B
N_dot <- a * (S - N) - sum(qN / (rho * l_Root) * Growth) +
sum(qN[1]^2 / (QN[1] * rho * l_Root) * alphaN[1] * d[1] * D[1] * dc[1], qN[2]^2 / (QN[2] * rho * l_Root) * alphaN[2] * d[2] * D[2] * dc[2])
D_dot <- c(m * B[1] - qN[1]/QN[1] * d[1] * D[1] * dc[1],
m * B[2] - qN[2]/QN[2] * d[2] * D[2] * dc[2])
L_dot <- cRate * (L0 - sum(gamma_L * B * L) - sum(alpha_L * D * L) - L)
# S_dot <- S_a*(1-S_a)*(B[1]/(B[1]+B[2]) - v*(B[2]/(B[1]+B[2])))*sccr  # From Bever
# S_dot <- S_a*(1-S_a)* ((B[1] - v*B[2])/sum(B)  )   # From Revilla
S_dot <- - (S_a- (B[1]/sum(B)))*sccr[2] # simple version by me
list(c(B_dot, N_dot, D_dot, L_dot, S_dot, dc_dot))
}
# Parameters
refpars <- list("gLC" = c(0.030, 0.028),  # Maximum growth rate under light limitation #DONE
"kLC" = c(20, 20),  #      # Light availability under which 1/2 gLC is reached
"gNC" = c(0.028, 0.030), # Maximum growth rate under nutrient limitation #DONE
"kNC" = c(20, 20), #   # N availability under which 1/2 gNC is reached
"mC" = c(0.001, 0.001), #   # per capita mortality rate
"a" = 0.05, #   # turnover rate of nutrient supply. Can later be determined
# because it determiens the biomass in equilibrium (see Eppinga 2011 Appendix)
"S" = S, #DONE
"qNC" = c(18, 18), #  DONE # N content of tissue
"rho" = 1200, # DONE # soil bulk density
"l_Root" = 1, #DONE # rooting depyth
"QNC" = c(18, 18), #  DONE
"alphaNC" = c(0.7, 0.7), #DONE # Nutrient litter feedback
"dC" = c(0.015, 0.015), #DONE # Litter decomposition rate
"cRate" = 10, #DONE
"L0" = L0, #
"gamma_LC" = c(0.001, 0.001), #  # light interception coefficient
"alpha_LC" = c(0.001, 0.001), #  # light litter feedback coefficient
"alpha_a" = -0.02, # ?
"alpha_b" = 0, # ?
"beta_a" = 0, # partially DONE
"beta_b" = -0.02, #DONE
"sccr" = c(1,1), #DONE
"hfa" = 1
)
yini <- list("BA" = 100, "BB" = 100,"S" =  S,"DA" =  10, "DB" = 10,"L0"=  L0,
"Sa"= 0.5,"Dca"= 1,"Dcb" = 1)
out <- deSolve::ode(y = yini, times = 0:50000, parms = refpars, func = feedbackModel2)
out <- deSolve::ode(y = unlist(yini), times = 0:50000, parms = unlist(refpars), func = feedbackModel2)
length(yini)
feedbackModel2 <- function (t, y, mu) {
# Extract parameter objects from parameter vector
gLinit <- mu[1:2]
kL <- mu[3:4]
gNinit <- mu[5:6]
kN <- mu[7:8]
m <- mu[9:10]
a <- mu[11]
S <- mu[12]
qN <- mu[13:14]
rho <- mu[15]
l_Root <- mu[16]
QN <- mu[17:18]
alphaN <- mu[19:20]
d <- mu[21:22]
cRate <- mu[23]
L0 <- mu[24]
gamma_L <- mu[25:26]
alpha_L <- mu[27:28]
alpha <- mu[29:30] # see Bever 2003
beta <- mu[31:32] # see Bever 2003
sccr <- mu[33:35] # soil community change rate for decomposers and competitors
qmax <- QN # plant tissue N content which has maximum decomposition rate
gL <- gN <- numeric(2)
hfa <- mu[36]
# Extract state variables from state variable vector
B <- y[1:2] # Biomass: Carex and Phalaris
N <- y[3] # Nutrients
D <- y[4:5] # Litter mass:  Carex and Phalaris
L <- y[6] # Light
S_a <- y[7] #S_a in Bever 2003
dc <- y[8:9]
gL[1] <- max(0,(gLinit[1] + alpha[1]*S_a + beta[1]*(1-S_a)))
gL[2] <- max(0,(gLinit[2] + alpha[2]*S_a + beta[2]*(1-S_a)))
gN[1] <- max(0,(gNinit[1] + alpha[1]*S_a + beta[1]*(1-S_a)))
gN[2] <- max(0,(gNinit[2] + alpha[2]*S_a + beta[2]*(1-S_a)))
if(hfa == 0) dc_dot <- - (dc- ((qN[1]/qmax)*(D[1]/(sum(D))) + (qN[2]/qmax)*(D[2]/(sum(D)))))*sccr[1]
else dc_dot <- c(- (S_a- (B[1]/sum(B)))*sccr[3], - ((1-S_a)- (B[2]/sum(B)))*sccr[3])
Growth <- pmin(gL * L /(kL + L), gN * N / (kN + N)) * B
B_dot <-  Growth - m * B
N_dot <- a * (S - N) - sum(qN / (rho * l_Root) * Growth) +
sum(qN[1]^2 / (QN[1] * rho * l_Root) * alphaN[1] * d[1] * D[1] * dc[1], qN[2]^2 / (QN[2] * rho * l_Root) * alphaN[2] * d[2] * D[2] * dc[2])
D_dot <- c(m * B[1] - qN[1]/QN[1] * d[1] * D[1] * dc[1],
m * B[2] - qN[2]/QN[2] * d[2] * D[2] * dc[2])
L_dot <- cRate * (L0 - sum(gamma_L * B * L) - sum(alpha_L * D * L) - L)
# S_dot <- S_a*(1-S_a)*(B[1]/(B[1]+B[2]) - v*(B[2]/(B[1]+B[2])))*sccr  # From Bever
# S_dot <- S_a*(1-S_a)* ((B[1] - v*B[2])/sum(B)  )   # From Revilla
S_dot <- - (S_a- (B[1]/sum(B)))*sccr[2] # simple version by me
list(c(B_dot, N_dot, D_dot, L_dot, S_dot, dc_dot))
}
# Parameters
refpars <- list("gLC" = c(0.030, 0.028),  # Maximum growth rate under light limitation #DONE
"kLC" = c(20, 20),  #      # Light availability under which 1/2 gLC is reached
"gNC" = c(0.028, 0.030), # Maximum growth rate under nutrient limitation #DONE
"kNC" = c(20, 20), #   # N availability under which 1/2 gNC is reached
"mC" = c(0.001, 0.001), #   # per capita mortality rate
"a" = 0.05, #   # turnover rate of nutrient supply. Can later be determined
# because it determiens the biomass in equilibrium (see Eppinga 2011 Appendix)
"S" = S, #DONE
"qNC" = c(18, 18), #  DONE # N content of tissue
"rho" = 1200, # DONE # soil bulk density
"l_Root" = 1, #DONE # rooting depyth
"QNC" = c(18, 18), #  DONE
"alphaNC" = c(0.7, 0.7), #DONE # Nutrient litter feedback
"dC" = c(0.015, 0.015), #DONE # Litter decomposition rate
"cRate" = 10, #DONE
"L0" = L0, #
"gamma_LC" = c(0.001, 0.001), #  # light interception coefficient
"alpha_LC" = c(0.001, 0.001), #  # light litter feedback coefficient
"alpha_a" = -0.02, # ?
"alpha_b" = 0, # ?
"beta_a" = 0, # partially DONE
"beta_b" = -0.02, #DONE
"sccr" = c(1,1,1), #DONE
"hfa" = 1
)
yini <- list("BA" = 100, "BB" = 100,"S" =  S,"DA" =  10, "DB" = 10,"L0"=  L0,
"Sa"= 0.5,"Dca"= 1,"Dcb" = 1)
out <- deSolve::ode(y = unlist(yini), times = 0:50000, parms = unlist(refpars), func = feedbackModel2)
# Parameters
refpars <- list("gLC" = c(0.030, 0.028),  # Maximum growth rate under light limitation #DONE
"kLC" = c(20, 20),  #      # Light availability under which 1/2 gLC is reached
"gNC" = c(0.028, 0.030), # Maximum growth rate under nutrient limitation #DONE
"kNC" = c(20, 20), #   # N availability under which 1/2 gNC is reached
"mC" = c(0.001, 0.001), #   # per capita mortality rate
"a" = 0.05, #   # turnover rate of nutrient supply. Can later be determined
# because it determiens the biomass in equilibrium (see Eppinga 2011 Appendix)
"S" = S, #DONE
"qNC" = c(18, 18), #  DONE # N content of tissue
"rho" = 1200, # DONE # soil bulk density
"l_Root" = 1, #DONE # rooting depyth
"QNC" = c(18, 18), #  DONE
"alphaNC" = c(0.7, 0.7), #DONE # Nutrient litter feedback
"dC" = c(0.015, 0.015), #DONE # Litter decomposition rate
"cRate" = 10, #DONE
"L0" = L0, #
"gamma_LC" = c(0.001, 0.001), #  # light interception coefficient
"alpha_LC" = c(0.001, 0.001), #  # light litter feedback coefficient
"alpha_a" = -0.02, # ?
"alpha_b" = 0, # ?
"beta_a" = 0, # partially DONE
"beta_b" = -0.02, #DONE
"sccr" = c(1,1,1), #DONE
"hfa" = 0
)
yini <- list("BA" = 100, "BB" = 100,"S" =  S,"DA" =  10, "DB" = 10,"L0"=  L0,
"Sa"= 0.5,"Dca"= 1,"Dcb" = 1)
out <- deSolve::ode(y = unlist(yini), times = 0:50000, parms = unlist(refpars), func = feedbackModel2)
mu <- unlist(refpars)
y <- unlist(yini)
# Extract parameter objects from parameter vector
gLinit <- mu[1:2]
kL <- mu[3:4]
gNinit <- mu[5:6]
kN <- mu[7:8]
m <- mu[9:10]
a <- mu[11]
S <- mu[12]
qN <- mu[13:14]
rho <- mu[15]
l_Root <- mu[16]
QN <- mu[17:18]
alphaN <- mu[19:20]
d <- mu[21:22]
cRate <- mu[23]
L0 <- mu[24]
gamma_L <- mu[25:26]
alpha_L <- mu[27:28]
alpha <- mu[29:30] # see Bever 2003
beta <- mu[31:32] # see Bever 2003
sccr <- mu[33:35] # soil community change rate for decomposers and competitors
qmax <- QN # plant tissue N content which has maximum decomposition rate
gL <- gN <- numeric(2)
hfa <- mu[36]
# Extract state variables from state variable vector
B <- y[1:2] # Biomass: Carex and Phalaris
N <- y[3] # Nutrients
D <- y[4:5] # Litter mass:  Carex and Phalaris
L <- y[6] # Light
S_a <- y[7] #S_a in Bever 2003
dc <- y[8:9]
gL[1] <- max(0,(gLinit[1] + alpha[1]*S_a + beta[1]*(1-S_a)))
gL[2] <- max(0,(gLinit[2] + alpha[2]*S_a + beta[2]*(1-S_a)))
gN[1] <- max(0,(gNinit[1] + alpha[1]*S_a + beta[1]*(1-S_a)))
gN[2] <- max(0,(gNinit[2] + alpha[2]*S_a + beta[2]*(1-S_a)))
hfa == 0
hfa
hfa = 1
hfa == 0
dc_dot <- c(- (S_a- (B[1]/sum(B)))*sccr[3], - ((1-S_a)- (B[2]/sum(B)))*sccr[3])
dc_dot
Growth <- pmin(gL * L /(kL + L), gN * N / (kN + N)) * B
B_dot <-  Growth - m * B
Growth
B_dot
N_dot <- a * (S - N) - sum(qN / (rho * l_Root) * Growth) +
sum(qN[1]^2 / (QN[1] * rho * l_Root) * alphaN[1] * d[1] * D[1] * dc[1], qN[2]^2 / (QN[2] * rho * l_Root) * alphaN[2] * d[2] * D[2] * dc[2])
N_dot
D_dot <- c(m * B[1] - qN[1]/QN[1] * d[1] * D[1] * dc[1],
m * B[2] - qN[2]/QN[2] * d[2] * D[2] * dc[2])
D_dot
D_dot <- c(m[1] * B[1] - qN[1]/QN[1] * d[1] * D[1] * dc[1],
m[2] * B[2] - qN[2]/QN[2] * d[2] * D[2] * dc[2])
D_dot
L_dot <- cRate * (L0 - sum(gamma_L * B * L) - sum(alpha_L * D * L) - L)
L_dot
S_dot <- - (S_a- (B[1]/sum(B)))*sccr[2] # simple version by me
S_dot
feedbackModel2 <- function (t, y, mu) {
# Extract parameter objects from parameter vector
gLinit <- mu[1:2]
kL <- mu[3:4]
gNinit <- mu[5:6]
kN <- mu[7:8]
m <- mu[9:10]
a <- mu[11]
S <- mu[12]
qN <- mu[13:14]
rho <- mu[15]
l_Root <- mu[16]
QN <- mu[17:18]
alphaN <- mu[19:20]
d <- mu[21:22]
cRate <- mu[23]
L0 <- mu[24]
gamma_L <- mu[25:26]
alpha_L <- mu[27:28]
alpha <- mu[29:30] # see Bever 2003
beta <- mu[31:32] # see Bever 2003
sccr <- mu[33:35] # soil community change rate for decomposers and competitors
qmax <- QN # plant tissue N content which has maximum decomposition rate
gL <- gN <- numeric(2)
hfa <- mu[36]
# Extract state variables from state variable vector
B <- y[1:2] # Biomass: Carex and Phalaris
N <- y[3] # Nutrients
D <- y[4:5] # Litter mass:  Carex and Phalaris
L <- y[6] # Light
S_a <- y[7] #S_a in Bever 2003
dc <- y[8:9]
gL[1] <- max(0,(gLinit[1] + alpha[1]*S_a + beta[1]*(1-S_a)))
gL[2] <- max(0,(gLinit[2] + alpha[2]*S_a + beta[2]*(1-S_a)))
gN[1] <- max(0,(gNinit[1] + alpha[1]*S_a + beta[1]*(1-S_a)))
gN[2] <- max(0,(gNinit[2] + alpha[2]*S_a + beta[2]*(1-S_a)))
if(hfa == 0) dc_dot <- - (dc- ((qN[1]/qmax)*(D[1]/(sum(D))) + (qN[2]/qmax)*(D[2]/(sum(D)))))*sccr[1]
else dc_dot <- c(- (S_a- (B[1]/sum(B)))*sccr[3], - ((1-S_a)- (B[2]/sum(B)))*sccr[3])
Growth <- pmin(gL * L /(kL + L), gN * N / (kN + N)) * B
B_dot <-  Growth - m * B
N_dot <- a * (S - N) - sum(qN / (rho * l_Root) * Growth) +
sum(qN[1]^2 / (QN[1] * rho * l_Root) * alphaN[1] * d[1] * D[1] * dc[1], qN[2]^2 / (QN[2] * rho * l_Root) * alphaN[2] * d[2] * D[2] * dc[2])
D_dot <- c(m[1] * B[1] - qN[1]/QN[1] * d[1] * D[1] * dc[1],
m[2] * B[2] - qN[2]/QN[2] * d[2] * D[2] * dc[2])
L_dot <- cRate * (L0 - sum(gamma_L * B * L) - sum(alpha_L * D * L) - L)
# S_dot <- S_a*(1-S_a)*(B[1]/(B[1]+B[2]) - v*(B[2]/(B[1]+B[2])))*sccr  # From Bever
# S_dot <- S_a*(1-S_a)* ((B[1] - v*B[2])/sum(B)  )   # From Revilla
S_dot <- - (S_a- (B[1]/sum(B)))*sccr[2] # simple version by me
list(c(B_dot, N_dot, D_dot, L_dot, S_dot, dc_dot))
}
out <- deSolve::ode(y = unlist(yini), times = 0:50000, parms = unlist(refpars), func = feedbackModel2)
plot(out[,2], type = "l")
temporal dynamics
#' ================================
mycol <- rainbow(6)
matplot(out[, 1], out[,c(-1,-8,-9,-10)], type = "l", col = mycol, lty = 1,
xlab = "Time (years)", ylab = "Values")
legend("topright", lty = 1, col = mycol, legend = c("B Carex", "B Phalaris", "N", "D Carex", "D Phalaris", "Light"))
out[1:10,]
# Parameters
refpars <- list("gLC" = c(0.030, 0.028),  # Maximum growth rate under light limitation #DONE
"kLC" = c(20, 20),  #      # Light availability under which 1/2 gLC is reached
"gNC" = c(0.028, 0.030), # Maximum growth rate under nutrient limitation #DONE
"kNC" = c(20, 20), #   # N availability under which 1/2 gNC is reached
"mC" = c(0.001, 0.001), #   # per capita mortality rate
"a" = 0.05, #   # turnover rate of nutrient supply. Can later be determined
# because it determiens the biomass in equilibrium (see Eppinga 2011 Appendix)
"S" = S, #DONE
"qNC" = c(18, 18), #  DONE # N content of tissue
"rho" = 1200, # DONE # soil bulk density
"l_Root" = 1, #DONE # rooting depyth
"QNC" = c(18, 18), #  DONE
"alphaNC" = c(0.7, 0.7), #DONE # Nutrient litter feedback
"dC" = c(0.015, 0.015), #DONE # Litter decomposition rate
"cRate" = 10, #DONE
"L0" = L0, #
"gamma_LC" = c(0.001, 0.001), #  # light interception coefficient
"alpha_LC" = c(0.001, 0.001), #  # light litter feedback coefficient
"alpha_a" = 0, # ?
"alpha_b" = 0, # ?
"beta_a" = 0, # partially DONE
"beta_b" = -0.02, #DONE
"sccr" = c(1,1,1), #DONE
"hfa" = 0
)
yini <- list("BA" = 100, "BB" = 100,"S" =  S,"DA" =  10, "DB" = 10,"L0"=  L0,
"Sa"= 0.5,"Dca"= 1,"Dcb" = 1)
out <- deSolve::ode(y = unlist(yini), times = 0:50000, parms = unlist(refpars), func = feedbackModel2)
#' Visualization of temporal dynamics
#' ================================
mycol <- rainbow(6)
matplot(out[, 1], out[,c(-1,-8,-9,-10)], type = "l", col = mycol, lty = 1,
xlab = "Time (years)", ylab = "Values")
legend("topright", lty = 1, col = mycol)
out[1:10,]
plot(out[,9], type = "l")
